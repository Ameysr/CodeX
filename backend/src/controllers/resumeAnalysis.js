const { GoogleGenerativeAI } = require("@google/generative-ai");

const analyzeResume = async (req, res) => {
  try {
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_KEY);
    const resumeData = req.body;
    
    if (!resumeData) {
      return res.status(400).json({ error: "No resume data provided" });
    }

    const systemInstruction = `
You are a professional resume reviewer. Follow these rules:

1. Analyze the resume data provided
2. Identify 3 key strengths and 3 areas for improvement
3. For each improvement, provide a concrete suggestion
4. Format your response as:
   <h3 class="text-2xl font-bold mb-4">Resume Analysis</h3>
   <div class="mb-6">
     <h4 class="text-xl font-semibold mb-2 text-green-500">Strengths:</h4>
     <ul class="list-disc pl-5 space-y-1">
       <li>Strength 1</li>
       <li>Strength 2</li>
       <li>Strength 3</li>
     </ul>
   </div>
   <div class="mb-6">
     <h4 class="text-xl font-semibold mb-2 text-yellow-500">Improvements:</h4>
     <ul class="list-disc pl-5 space-y-1">
       <li>Improvement 1 (suggestion)</li>
       <li>Improvement 2 (suggestion)</li>
       <li>Improvement 3 (suggestion)</li>
     </ul>
   </div>
   <p class="mt-4 text-blue-400">For deeper learning, try courses on Nexus!</p>

5. Always use HTML formatting with no additional text
6. Focus on clarity, impact, and ATS compatibility
`.trim();

    const model = genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash",
      systemInstruction
    });

    const response = await model.generateContent(
      `Resume data:\n${JSON.stringify(resumeData, null, 2)}`
    );

    const analysisHTML = response.response.text().trim() || 
      "<p class='text-red-500'>Error generating analysis. Please try again.</p>";

    return res.status(200).json({ analysis: analysisHTML });

  } catch (error) {
    console.error("Resume Analysis Error:", error);
    return res.status(500).json({ 
      error: "Failed to analyze resume", 
      details: error.message 
    });
  }
};

const generatePDF = async (req, res) => {
  try {
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_KEY);
    const resumeData = req.body;

    const systemInstruction = `
You are a professional resume writer. Follow these rules:

1. Convert the provided resume data into a polished HTML resume
2. Use clean, professional styling with modern CSS
3. Structure with sections: Header, Summary, Experience, Education, Skills, Projects
4. Apply responsive design principles
5. Include subtle animations for professionalism
6. Format dates consistently (MM/YYYY)
7. Add a "Generated by Nexus" footer
8. Output ONLY the HTML code with embedded CSS
9. Use a professional color scheme (blues and grays)
10. Make sure it looks good when printed to PDF
`.trim();

    const model = genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash",
      systemInstruction
    });

    const response = await model.generateContent(
      `Resume data:\n${JSON.stringify(resumeData, null, 2)}`
    );

    const resumeHTML = response.response.text().trim() || 
      "<h1 class='text-red-500'>Error generating resume</h1>";

    return res.status(200).json({ html: resumeHTML });

  } catch (error) {
    console.error("PDF Generation Error:", error);
    return res.status(500).json({ 
      error: "Failed to generate PDF", 
      details: error.message 
    });
  }
};

const improveContent = async (req, res) => {
  try {
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_KEY);
    const { content, section, field, context } = req.body;
    
    if (!content || !section || !field) {
      return res.status(400).json({ error: "Missing required fields" });
    }

    const systemInstruction = `
You are a professional resume content improvement specialist. Follow these rules:

1. Improve the provided content to make it more impactful and professional
2. Use action-oriented language and quantifiable achievements
3. Make it ATS-friendly with relevant keywords
4. Keep the same general length and structure
5. Focus on impact and results
6. Return ONLY the improved content - no explanations or additional text
7. For experience descriptions: Start with strong action verbs, include metrics
8. For project descriptions: Highlight technical skills, show problem-solving
9. For summaries: Create compelling value proposition with key strengths
10. For education: Include relevant coursework, achievements, skills developed
`.trim();

    const model = genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash",
      systemInstruction
    });

    const response = await model.generateContent(
      `Content to improve: "${content}"\nSection: ${section}\nField: ${field}\nContext: ${JSON.stringify(context, null, 2)}`
    );

    const improvedContent = response.response.text().trim() || 
      "Unable to improve content. Please try again.";

    return res.status(200).json({ improvedContent });

  } catch (error) {
    console.error("Content Improvement Error:", error);
    return res.status(500).json({ 
      error: "Failed to improve content", 
      details: error.message 
    });
  }
};

const getImprovementSuggestions = async (req, res) => {
  try {
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_KEY);
    const { content, section, field, context } = req.body;
    
    if (!content || !section || !field) {
      return res.status(400).json({ error: "Missing required fields" });
    }

    const systemInstruction = `
You are a professional resume improvement advisor. Follow these rules:

1. Analyze the provided content and give exactly 3 improvement suggestions
2. Each suggestion should be specific and actionable
3. Format your response exactly as:
   <div class="improvement-suggestions">
     <div class="suggestion-item">
       <span class="bullet">●</span>
       <strong>First improvement suggestion</strong>
     </div>
     <div class="suggestion-item">
       <span class="bullet">●</span>
       <strong>Second improvement suggestion</strong>
     </div>
     <div class="suggestion-item">
       <span class="bullet">●</span>
       <strong>Third improvement suggestion</strong>
     </div>
   </div>

4. Make suggestions relevant to the section and field provided
5. Focus on professional impact and ATS optimization
6. Keep each suggestion concise but specific
7. Always return exactly 3 suggestions with bold circle symbols
8. Use HTML formatting only as shown above
`.trim();

    const model = genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash",
      systemInstruction
    });

    const response = await model.generateContent(
      `Analyze this content: "${content}"\nSection: ${section}\nField: ${field}\nContext: ${JSON.stringify(context, null, 2)}`
    );

    const suggestions = response.response.text().trim() || 
      "<div class='text-red-500'>Unable to generate suggestions. Please try again.</div>";

    return res.status(200).json({ suggestions });

  } catch (error) {
    console.error("Improvement Suggestions Error:", error);
    return res.status(500).json({ 
      error: "Failed to generate suggestions", 
      details: error.message 
    });
  }
};


module.exports = {getImprovementSuggestions,improveContent,generatePDF,analyzeResume}